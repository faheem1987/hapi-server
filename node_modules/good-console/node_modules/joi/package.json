{
  "_args": [
    [
      {
        "raw": "joi@8.1.x",
        "scope": null,
        "escapedName": "joi",
        "name": "joi",
        "rawSpec": "8.1.x",
        "spec": ">=8.1.0 <8.2.0",
        "type": "range"
      },
      "/Users/fahmad/code/pangea-training/myproject/node_modules/good-console"
    ]
  ],
  "_from": "joi@>=8.1.0 <8.2.0",
  "_id": "joi@8.1.1",
  "_inCache": true,
  "_location": "/good-console/joi",
  "_nodeVersion": "5.10.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/joi-8.1.1.tgz_1464113955485_0.932734249625355"
  },
  "_npmUser": {
    "name": "marsup",
    "email": "nicolas@morel.io"
  },
  "_npmVersion": "3.8.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "joi@8.1.x",
    "scope": null,
    "escapedName": "joi",
    "name": "joi",
    "rawSpec": "8.1.x",
    "spec": ">=8.1.0 <8.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/good-console"
  ],
  "_resolved": "https://npme.walmart.com/joi/-/joi-8.1.1.tgz",
  "_shasum": "2d8b52a5d909d217ed47248577eefe8b1798f48f",
  "_shrinkwrap": null,
  "_spec": "joi@8.1.x",
  "_where": "/Users/fahmad/code/pangea-training/myproject/node_modules/good-console",
  "bugs": {
    "url": "https://github.com/hapijs/joi/issues"
  },
  "dependencies": {
    "hoek": "4.x.x",
    "isemail": "2.x.x",
    "moment": "2.x.x",
    "topo": "2.x.x"
  },
  "description": "Object schema validation",
  "devDependencies": {
    "code": "2.x.x",
    "lab": "10.x.x",
    "markdown-toc": "0.12.x"
  },
  "directories": {},
  "dist": {
    "shasum": "2d8b52a5d909d217ed47248577eefe8b1798f48f",
    "tarball": "https://registry.npmjs.org/joi/-/joi-8.1.1.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "362b1b797f138fb2570c0a838c0852e4c8d1f72e",
  "homepage": "https://github.com/hapijs/joi",
  "keywords": [
    "hapi",
    "schema",
    "validation"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hueniverse.com"
    },
    {
      "name": "marsup",
      "email": "marsup@gmail.com"
    }
  ],
  "name": "joi",
  "optionalDependencies": {},
  "readme": "![joi Logo](https://raw.github.com/hapijs/joi/master/images/joi.png)\n\nObject schema description language and validator for JavaScript objects.\n\n[![npm version](https://badge.fury.io/js/joi.svg)](http://badge.fury.io/js/joi)\n[![Build Status](https://secure.travis-ci.org/hapijs/joi.svg)](http://travis-ci.org/hapijs/joi)\n[![Dependencies Status](https://david-dm.org/hapijs/joi.svg)](https://david-dm.org/hapijs/joi)\n[![DevDependencies Status](https://david-dm.org/hapijs/joi/dev-status.svg)](https://david-dm.org/hapijs/joi#info=devDependencies)\n[![Known Vulnerabilities](https://snyk.io/test/npm/joi/badge.svg)](https://snyk.io/test/npm/joi)\n\n[![Join the chat at https://gitter.im/hapijs/joi](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/hapijs/joi?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nLead Maintainer: [Nicolas Morel](https://github.com/marsup)\n\n# Introduction\n\nImagine you run facebook and you want visitors to sign up on the website with real names and not something like `l337_p@nda` in the first name field. How would you define the limitations of what can be inputted and validate it against the set rules? \n\nThis is joi, joi allows you to create *blueprints* or *schemas* for JavaScript objects (an object that stores information) to ensure *validation* of key information.\n\n\n# Example\n\n```javascript\nvar Joi = require('joi');\n\nvar schema = Joi.object().keys({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),\n    access_token: [Joi.string(), Joi.number()],\n    birthyear: Joi.number().integer().min(1900).max(2013),\n    email: Joi.string().email()\n}).with('username', 'birthyear').without('password', 'access_token');\n\nJoi.validate({ username: 'abc', birthyear: 1994 }, schema, function (err, value) { });  // err === null -> valid\n```\n\nThe above schema defines the following constraints:\n* `username`\n    * a required string\n    * must contain only alphanumeric characters\n    * at least 3 characters long but no more than 30\n    * must be accompanied by `birthyear`\n* `password`\n    * an optional string\n    * must satisfy the custom regex\n    * cannot appear together with `access_token`\n* `access_token`\n    * an optional, unconstrained string or number\n* `birthyear`\n    * an integer between 1900 and 2013\n* `email`\n    * a valid email address string\n\n# Usage\n\nUsage is a two steps process. First, a schema is constructed using the provided types and constraints:\n\n```javascript\nvar schema = {\n    a: Joi.string()\n};\n```\n\nNote that **joi** schema objects are immutable which means every additional rule added (e.g. `.min(5)`) will return a\nnew schema object.\n\nThen the value is validated against the schema:\n\n```javascript\nJoi.validate({ a: 'a string' }, schema, function (err, value) { });\n```\n\nIf the value is valid, `null` is returned, otherwise an `Error` object.\n\nThe schema can be a plain JavaScript object where every key is assigned a **joi** type, or it can be a **joi** type directly:\n\n```javascript\nvar schema = Joi.string().min(10);\n```\n\nIf the schema is a **joi** type, the `schema.validate(value, callback)` can be called directly on the type. When passing a non-type schema object,\nthe module converts it internally to an object() type equivalent to:\n\n```javascript\nvar schema = Joi.object().keys({\n    a: Joi.string()\n});\n```\n\nWhen validating a schema:\n\n* Keys are optional by default.\n* Strings are utf-8 encoded by default.\n* Rules are defined in an additive fashion and evaluated in order after whitelist and blacklist checks.\n\n# API\nSee the [API Reference](https://github.com/hapijs/joi/blob/v8.1.1/API.md).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/joi.git"
  },
  "scripts": {
    "test": "lab -t 100 -a code -L",
    "test-cov-html": "lab -r html -o coverage.html -a code",
    "toc": "node generate-readme-toc.js",
    "version": "npm run toc && git add API.md README.md"
  },
  "version": "8.1.1"
}
